/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.1.0-SNAPSHOT
 * apidoc:0.11.21 http://dockerhost:9000/movio/apidoc-generator-reference/0.1.0-SNAPSHOT/test_play_2_4_client
 */
package movio.apidoc.generator.reference.v0 {

  object Constants {

    val UserAgent = "apidoc:0.11.21 http://dockerhost:9000/movio/apidoc-generator-reference/0.1.0-SNAPSHOT/test_play_2_4_client"
    val Version = "0.1.0-SNAPSHOT"
    val VersionMajor = 0

  }

  /** Play Client
    *
    * For details on config see - https://www.playframework.com/documentation/2.4.x/ScalaWS
    *
    * @param apiUrl the server/host/port to connect to, eg `http://localhost:9000`
    * @param auth if auth is used
    * @param defaultHeaders to be sent with all requests
    * @param autoClose if the client is used within a Play App this setting isn't used. Play will manage
    *        the settings and client. If used outside a Play app a client with settings must be created.
    *        `autoClose = true` means that a new client will be created for every request, this includes
    *        parsing the configuration. The client will close the connection for you.
    *        If `autoClose = false` one connnection will be made when the class is instantiated. You are
    *        responsible for closing the connection.
    */
  class Client(
    apiUrl: String,
    auth: scala.Option[movio.apidoc.generator.reference.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil,
    autoClose: Boolean = true // Set to false for better perf or lots or request. You must manually call `close`
  ) {
    import movio.apidoc.generator.reference.v0.models.json._

    private[this] val logger = play.api.Logger("movio.apidoc.generator.reference.v0.Client")

    logger.info(s"Initializing movio.apidoc.generator.reference.v0.Client for url $apiUrl")

    val client = play.api.Play.maybeApplication match {
      case Some(_) => // Don't need a client when in a play app
        logger.trace("Play app found - using that it to configure play client")
        None
      case None =>
        autoClose match {
          case true => // Don't need a client, we'll create one for each request
            logger.trace("Auto close set - will create a new connection for each request")
            None
          case false =>
            logger.trace("Auto close not set - creating a new client - will need to be closed manually")
            val builder = new com.ning.http.client.AsyncHttpClientConfig.Builder()
            Some(new play.api.libs.ws.ning.NingWSClient(builder.build()))
        }
    }

    def healthchecks: Healthchecks = Healthchecks

    def people: People = People

    object Healthchecks extends Healthchecks {
      override def getInternalAndHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[movio.apidoc.generator.reference.v0.models.Healthcheck] = {
        _executeRequest("GET", s"/_internal_/healthcheck").map {
          case r if r.status == 200 => _root_.movio.apidoc.generator.reference.v0.Client.parseJson("movio.apidoc.generator.reference.v0.models.Healthcheck", r, _.validate[movio.apidoc.generator.reference.v0.models.Healthcheck])
          case r => throw new movio.apidoc.generator.reference.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object People extends People {
      override def postV0AndPersonByTenant(
        tenant: String,
        person: movio.apidoc.generator.reference.v0.models.Person
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[movio.apidoc.generator.reference.v0.models.Person] = {
        val payload = play.api.libs.json.Json.toJson(person)

        _executeRequest("POST", s"/${play.utils.UriEncoding.encodePathSegment(tenant, "UTF-8")}/v0/person/", body = Some(payload)).map {
          case r if r.status == 201 => _root_.movio.apidoc.generator.reference.v0.Client.parseJson("movio.apidoc.generator.reference.v0.models.Person", r, _.validate[movio.apidoc.generator.reference.v0.models.Person])
          case r if r.status == 404 => throw new movio.apidoc.generator.reference.v0.errors.ErrorResponse(r)
          case r => throw new movio.apidoc.generator.reference.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 404")
        }
      }

      override def postV0ByTenant(
        tenant: String,
        people: Seq[movio.apidoc.generator.reference.v0.models.Person]
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Int] = {
        val payload = play.api.libs.json.Json.toJson(people)

        _executeRequest("POST", s"/${play.utils.UriEncoding.encodePathSegment(tenant, "UTF-8")}/v0/people/", body = Some(payload)).map {
          case r if r.status == 200 => _root_.movio.apidoc.generator.reference.v0.Client.parseJson("Int", r, _.validate[Int])
          case r if r.status == 404 => throw new movio.apidoc.generator.reference.v0.errors.ErrorResponse(r)
          case r => throw new movio.apidoc.generator.reference.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      val url:play.api.libs.ws.WSRequest = play.api.Play.maybeApplication match {
        case Some(app) => // We have a running Play App use built in client for url
          import play.api.Play.current
          play.api.libs.ws.WS.url(apiUrl + path)
        case None =>
          val builder = new com.ning.http.client.AsyncHttpClientConfig.Builder()
          client match {
            case Some(c) => // using existing client
              c.url(apiUrl + path)
            case None => // we need to create a new client for each request
              val c = new play.api.libs.ws.ning.NingWSClient(builder.build())
              c.url(apiUrl + path)
          }
      }

      val holder = url.withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)

      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      headers: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      val result = method.toUpperCase match {
        case "GET" => {
          val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(headers:_*)
          _logRequest("GET", request).get()
        }
        case "POST" => {
          val allHeaders = ("Content-Type" -> "application/json; charset=UTF-8") +: headers
          val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(allHeaders:_*)
          _logRequest("POST", request).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          val allHeaders = ("Content-Type" -> "application/json; charset=UTF-8") +: headers
          val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(allHeaders:_*)
          val payload = body.getOrElse(play.api.libs.json.Json.obj())
          _logRequest("PUT", request).put(payload)
        }
        case "PATCH" => {
          val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(headers:_*)
          val payload = body.getOrElse(play.api.libs.json.Json.obj())
          _logRequest("PATCH", request).patch(payload)
        }
        case "DELETE" => {
          val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(headers:_*)
          _logRequest("DELETE", request).delete()
        }
         case "HEAD" => {
           val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(headers:_*)
          _logRequest("HEAD", request).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(headers:_*)).options()
        }
        case _ => {
          val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(headers:_*)
          _logRequest(method, request)
          sys.error("Unsupported method[%s]".format(method))
        }
      }
      // Close connection if needed
      result.onComplete {
        case _ => //
          client match {
            case Some(c) =>
              if (autoClose) {
                logger.trace("Auto closing client connection")
                c.close
              }
            case _ => // No client - don't need to close
          }
      }
      result
    }

    def close: Unit = {
      client match {
        case Some(c) =>
          if (! autoClose)
            c.close
          else
            throw new RuntimeException("Connection set to autoClose - do not call close")
        case None =>
          throw new RuntimeException("Connection managed by the running Play App - do not call close")
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new movio.apidoc.generator.reference.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait Healthchecks {
    def getInternalAndHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[movio.apidoc.generator.reference.v0.models.Healthcheck]
  }

  trait People {
    def postV0AndPersonByTenant(
      tenant: String,
      person: movio.apidoc.generator.reference.v0.models.Person
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[movio.apidoc.generator.reference.v0.models.Person]

    def postV0ByTenant(
      tenant: String,
      people: Seq[movio.apidoc.generator.reference.v0.models.Person]
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Int]
  }

  package errors {

    import movio.apidoc.generator.reference.v0.models.json._

    case class ErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val error = _root_.movio.apidoc.generator.reference.v0.Client.parseJson("movio.apidoc.generator.reference.v0.models.Error", response, _.validate[movio.apidoc.generator.reference.v0.models.Error])
    }

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}