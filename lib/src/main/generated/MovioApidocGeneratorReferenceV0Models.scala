/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.1.0-SNAPSHOT
 * apidoc:0.11.6 http://localhost:9000/movio/apidoc-generator-reference/0.1.0-SNAPSHOT/advanced_scala_models
 */
package movio.apidoc.generator.reference.v0.models {

  case class Address(
    street: String,
    tags: Seq[String]
  ) {

    import Validation._
    validateLength("street", street, 255)
    validateLengthOfAll("tags", tags, 5)

  }

  /**
   * An error message from the API.
   */
  case class Error(
    status: String,
    message: String
  ) {

    import Validation._


  }

  case class Healthcheck(
    status: String = "healthy"
  ) {

    import Validation._


  }

  case class KafkaPerson(
    v0: movio.apidoc.generator.reference.v0.models.Person,
    utcGeneratedTime: _root_.org.joda.time.LocalDateTime = org.joda.time.LocalDateTime.now(org.joda.time.DateTimeZone.UTC)
  ) extends KafkaMessage {

    import Validation._

    def generateKey(tenant: String) = v0.id
  }

  /**
   * This is a person
   */
  case class Person(
    id: String,
    name: String,
    dob: _root_.scala.Option[_root_.org.joda.time.LocalDate] = None,
    addresses: Seq[movio.apidoc.generator.reference.v0.models.Address]
  ) {

    import Validation._
    validateLength("id", id, 5)
    validateRegex("id", id, "^[A-Za-z0-9]+$")
    validateLength("name", name, 255)

  }

  object Validation {

    def validateLength(name: String, value: _root_.scala.Option[String], length: Int): Unit = {
      value foreach { value ⇒
        validateLength(name, value, length)
      }
    }

    def validateLength(name: String, value: String, length: Int): Unit = {
      require(value.length <= length, s"$name must be $length characters or less")
    }

    def validateLengthOfAll(name: String, values: _root_.scala.Option[Seq[String]], length: Int): Unit = {
      values foreach { values ⇒
        validateLengthOfAll(name, values, length)
      }
    }

    def validateLengthOfAll(name: String, values: Seq[String], length: Int): Unit = {
      values foreach { value ⇒
        validateLength(name, value, length)
      }
    }

    def validateRegex(name: String, value: String, regex: String): Unit = {
      require(regex.r.findFirstIn(value).isDefined, s"$name did not match regex: $regex")
    }

  }


  trait KafkaMessage {

    /**
      A scala statement/code that returns the kafka key to use
      Usually something like `data.exhibitorId`
      */
    def generateKey(tenant: String): String
  }

}